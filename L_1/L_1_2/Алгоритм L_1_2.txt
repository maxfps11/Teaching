Алгоритм программы L_1_2 - файл main.c
	Главная функция программы.
		Наименование: main
			Аргументы: отсутствуют.
1. Объявляем указатель на структуру типа string и инициализируем указателем полученным в результате выполнения функции get_str()
2. Завершаем программу кодом возврата полученным в результате выполнения функции print_str()

	Функция считывания строки.
		Наименование функции: get_str
			Аргументы функции: отсутствуют.
1. Объявляем положительную целочисленную переменную.
2. Объявляем статичную структуру типа string.
3. Считываем при помощи функции scanf() из стандартной библиотеки «stdio.h» строку вида: «базис счисления» «последовательность символов согласно базису».
4. В цикле for  производим подсчёт длинны введённой строки проверяя каждый элемент на соответствие нулевому символу (концу строки), если элемент не равен целевому символу то инкрементируем переменную count.
5. Сохраняем длину строки.

	Функция проверки ввода.
		Наименование функции: validation
			Аргументы функции: указатель на структуру типа string.
1. Объявляем 2 константных строки «Number is wrong» и «Base is wrong».
2. В операторе switch производим проверку базиса счисления.
	2.1 Если базис счисления равен двум, то производим поэлементную проверку элементов массива в цикле for на вхождение в диапазон представления значений в данной СС.
		2.1.1 Если, хотя бы один из элементов массива выходит за пределы представления то выводим сообщение «Number is wrong.» и возвращаем код ошибки 1.
			2.1.2 Если не один из элементов массива не является ошибочным, то завершаем проверку кодом возврата 0.
	2.2 Если базис счисления равен десяти, то производим поэлементную проверку элементов массива в цикле for на вхождение в диапазон	представления значений в данной СС.
		2.2.1 Если, хотя бы один из элементов массива выходит за пределы представления то выводим сообщение «Number is wrong.» и возвращаем код ошибки 1.
			2.2.2 Если не один из элементов массива не является ошибочным, то завершаем проверку кодом возврата 0.
	2.3 Если базис счисления равен шестнадцати, то производим поэлементную проверку элементов массива в цикле for на вхождение в диапазон представления значений в данной СС.
		2.3.1 Если, хотя бы один из элементов массива выходит за пределы представления то выводим сообщение «Number is wrong.» и возвращаем код ошибки 1.
			2.3.2 Если не один из элементов массива не является ошибочным, то завершаем проверку кодом возврата 0.
	2.4 Если базис счисления не сходится с хотя бы одним возможным, то выводим сообщение «Base is wrong» и возвращаем код ошибки 1.

	Функция возведения в степень.
		Наименование функции: power
			Аргументы функции: число возводимое в степень типа  int,  и показатель степени типа int.
1. Сохраняем число возводимое в степень в переменную val типа  int.
2. Проверяем показатель степени.
	2.1.1 Если показатель степени не равен нулю, то возводим в степень используя цикл  for.
	2.1.2 Возвращаем вычисленное значение.
		2.2 Иначе возвращаем единицу.
	Функция перевода из двоичной.
		Наименование функции: from_bin
			Аргументы функции: указатель на структуру типа string.
1. Объявляем 3 переменных типа int.
2. В цикле for происходит поэлементное преобразование из данной СС в десятичную при помощи двух вложенных циклов for.
	2.1 В первом вложенном цикле for производим проверку на сходство элемента массива с одним из символов таблицы ASCII (от 0 до 9), перемножение возведённого при помощи функции power() в степень(степенью является позиция элемента в массиве) базиса СС на накопленный элемент k, и прибавляем вычисленное значение к переменной val.
	2.2 В втором вложенном цикле for производим проверку на сходство элемента массива с одним из символов таблицы ASCII (от  a  до f), перемножение возведённого при помощи функции power() в степень(степенью является позиция элемента в массиве) базиса СС на накопленный элемент k, и прибавляем вычисленное значение к переменной val.
3. В цикле for происходит поэлементное преобразование из десятичной СС в восьмеричную.
	3.1 Сохраняем остаток от деления на основание СС в переменную rest.
	3.2 Производим деление исходного числа на основание СС.
	3.3 В первом вложенном цикле for производим проверку и запись преобразованного элемента в массив.
		3.3.1 В операторе if сравниваем остаток с накопленным при прохождении итераций цикла числом k и записываем в i - тый элемент массива явно приведённую из типа  int в тип char переменную j с накопленным кодом символа.
	3.4 В первом вложенном цикле for производим проверку и запись преобразованного элемента в массив.
		3.4.1 В операторе if сравниваем остаток с накопленным при прохождении итераций цикла числом k и записываем в i - тый элемент массива явно приведённую из типа  int в тип char переменную j с накопленным кодом символа.
3. Возвращаем переменную count с накопленным и декрементированным значением.

	Функция перевода из десятичной.
		Наименование функции: from_dec
			Аргументы функции: указатель на структуру типа string.
1. Объявляем 3 переменных типа int.
2. В цикле for происходит поэлементное преобразование из данной СС в десятичную при помощи двух вложенных циклов for.
	2.1 В первом вложенном цикле for производим проверку на сходство элемента массива с одним из символов таблицы ASCII (от 0 до 9), перемножение возведённого при помощи функции power() в степень(степенью является позиция элемента в массиве) базиса СС на накопленный элемент k, и прибавляем вычисленное значение к переменной val.
	2.2 В втором вложенном цикле for производим проверку на сходство элемента массива с одним из символов таблицы ASCII (от  a  до f), перемножение возведённого при помощи функции power() в степень(степенью является позиция элемента в массиве) базиса СС на накопленный элемент k, и прибавляем вычисленное значение к переменной val.
3. В цикле for происходит поэлементное преобразование из десятичной СС в восьмеричную.
	3.1 Сохраняем остаток от деления на основание СС в переменную rest.
	3.2 Производим деление исходного числа на основание СС.
	3.3 В первом вложенном цикле for производим проверку и запись преобразованного элемента в массив.
		3.3.1 В операторе if сравниваем остаток с накопленным при прохождении итераций цикла числом k и записываем в i - тый элемент массива явно приведённую из типа  int в тип char переменную j с накопленным кодом символа.
	3.4 В первом вложенном цикле for производим проверку и запись преобразованного элемента в массив.
		3.4.1 В операторе if сравниваем остаток с накопленным при прохождении итераций цикла числом k и записываем в i - тый элемент массива явно приведённую из типа  int в тип char переменную j с накопленным кодом символа.
3. Возвращаем переменную count с накопленным и декрементированным значением.

	Функция перевода из шестнадцатиричной.
		Наименование функции: from_hex
			Аргументы функции: указатель на структуру типа string.
1. Объявляем 3 переменных типа int.
2. В цикле for происходит поэлементное преобразование из данной СС в десятичную при помощи двух вложенных циклов for.
	2.1 В первом вложенном цикле for производим проверку на сходство элемента массива с одним из символов таблицы ASCII (от 0 до 9), перемножение возведённого при помощи функции power() в степень(степенью является позиция элемента в массиве) базиса СС на накопленный элемент k, и прибавляем вычисленное значение к переменной val.
	2.2 В втором вложенном цикле for производим проверку на сходство элемента массива с одним из символов таблицы ASCII (от  a  до f), перемножение возведённого при помощи функции power() в степень(степенью является позиция элемента в массиве) базиса СС на накопленный элемент k, и прибавляем вычисленное значение к переменной val.
3. В цикле for происходит поэлементное преобразование из десятичной СС в восьмеричную.
	3.1 Сохраняем остаток от деления на основание СС в переменную rest.
	3.2 Производим деление исходного числа на основание СС.
	3.3 В первом вложенном цикле for производим проверку и запись преобразованного элемента в массив.
		3.3.1 В операторе if сравниваем остаток с накопленным при прохождении итераций цикла числом k и записываем в i - тый элемент массива явно приведённую из типа  int в тип char переменную j с накопленным кодом символа.
	3.4 В первом вложенном цикле for производим проверку и запись преобразованного элемента в массив.
		3.4.1 В операторе if сравниваем остаток с накопленным при прохождении итераций цикла числом k и записываем в i - тый элемент массива явно приведённую из типа  int в тип char переменную j с накопленным кодом символа.
3. Возвращаем переменную count с накопленным и декрементированным значением.
	Функция вывода строки.
		Наименование функции: print_str
			Аргументы функции: указатель на структуру типа string.
1. В операторе switch производим проверку базиса счисления.
	1.1 Если базис счисления равен двум.
		1.1.1 Производим вывод(повторяем ввод) при помощи функции printf() из стандартной библиотеки «stdio.h»
		1.1.2 В цикле for производим вывод преобразованной строки при помощи функции printf() из стандартной библиотеки «stdio.h»
	1.2 Если базис счисления равен десяти.
		1.2.1 Производим вывод(повторяем ввод) при помощи функции printf() из стандартной библиотеки «stdio.h»
		1.2.2 В цикле for производим вывод преобразованной строки при помощи функции printf() из стандартной библиотеки «stdio.h»
	1.3 Если базис счисления равен шестнадцати.
		1.3.1 Производим вывод(повторяем ввод) при помощи функции printf() из стандартной библиотеки «stdio.h»
		1.3.2 В цикле for производим вывод преобразованной строки при помощи функции printf() из стандартной библиотеки «stdio.h»
	1.4 Если базис счисления не сходится с хотя бы одним возможным то возвращаем 1.